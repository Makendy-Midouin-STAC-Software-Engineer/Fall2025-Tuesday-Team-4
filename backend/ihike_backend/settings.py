"""
Django settings for ihike_backend project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from BASE_DIR/.env if present
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    'django-insecure-sp!10%v5(xvymaw-z^99qymw=u+___3k7^rd7#&&-c8y9*e5+2',
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("1", "true", "yes", "on")

ALLOWED_HOSTS = [
    h.strip() for h in os.getenv(
        "ALLOWED_HOSTS",
        "ihike-api-dev.eba-dpt4em9m.us-east-1.elasticbeanstalk.com,localhost,127.0.0.1",
    ).split(",") if h.strip()
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'django_filters',
    'corsheaders',
    'hiking',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ihike_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ihike_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

_db_name = os.getenv("DB_NAME")
_database_url = os.getenv("DATABASE_URL")

_db_parsed = None
if _database_url and _database_url.strip():
    try:
        _db_parsed = dj_database_url.parse(
            _database_url.strip(),
            conn_max_age=600,
            ssl_require=os.getenv('DB_SSLMODE', '').lower() == 'require',
        )
    except Exception:
        _db_parsed = None

if _db_parsed:
    DATABASES = {'default': _db_parsed}
    engine = DATABASES['default'].get('ENGINE')
    if engine in (
        'django.db.backends.postgresql',
        'django.db.backends.postgresql_psycopg2',
    ):
        DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'
elif _db_name:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': _db_name,
            'USER': os.getenv('DB_USER', ''),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
            'OPTIONS': {k: v for k, v in {
                'sslmode': os.getenv('DB_SSLMODE', None),
            }.items() if v},
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# GDAL/GEOS native library paths (Windows)
# Set these in your .env if needed, e.g.:
# GDAL_LIBRARY_PATH=C:\\OSGeo4W\\bin\\gdal312.dll
# GEOS_LIBRARY_PATH=C:\\OSGeo4W\\bin\\geos_c.dll
# Optionally, set GDAL_BIN_DIR or OSGEO4W_ROOT to help the loader find DLLs

GDAL_LIBRARY_PATH = os.getenv("GDAL_LIBRARY_PATH")
GEOS_LIBRARY_PATH = os.getenv("GEOS_LIBRARY_PATH")

if os.name == 'nt':
    # Help Windows find the DLLs by adding the bin directory to the DLL search path
    _gdal_bin_dir = os.getenv("GDAL_BIN_DIR")
    _osgeo_root = os.getenv("OSGEO4W_ROOT")
    try:
        if _gdal_bin_dir and os.path.isdir(_gdal_bin_dir):
            os.add_dll_directory(_gdal_bin_dir)
        if _osgeo_root and os.path.isdir(_osgeo_root):
            _bin = os.path.join(_osgeo_root, "bin")
            if os.path.isdir(_bin):
                os.add_dll_directory(_bin)
    except (AttributeError, FileNotFoundError, OSError):
        # os.add_dll_directory is available on Python 3.8+; ignore if unavailable
        pass
else:
    # Linux: allow env vars to be honored and attempt auto-detection when not provided
    import ctypes, ctypes.util, importlib.util, sys
    _gdal_path = GDAL_LIBRARY_PATH
    if not _gdal_path:
        _gdal_found = ctypes.util.find_library("gdal")
        if _gdal_found:
            _gdal_path = _gdal_found
    # Try to load from GDAL wheel if installed
    if not _gdal_path:
        try:
            # Common location inside GDAL wheel
            import os as _os
            _candidate_paths = [
                _os.path.join(_p, 'osgeo', 'gdal.so') for _p in sys.path
            ]
            for _cand in _candidate_paths:
                if _os.path.exists(_cand):
                    _gdal_path = _cand
                    break
        except Exception:
            pass
    if _gdal_path:
        try:
            ctypes.CDLL(_gdal_path)
            # Expose to Django's GDAL loader if env var wasn't set
            if not GDAL_LIBRARY_PATH:
                GDAL_LIBRARY_PATH = _gdal_path
        except OSError:
            pass

import ctypes, ctypes.util

# Resolve GEOS path on Linux if not explicitly provided
_geos_path = GEOS_LIBRARY_PATH if GEOS_LIBRARY_PATH and os.path.exists(GEOS_LIBRARY_PATH) else None
if not _geos_path:
    _geos_found = ctypes.util.find_library("geos_c")
    if _geos_found:
        _geos_path = _geos_found
if not _geos_path:
    # Try to resolve GEOS from Shapely wheel as a last resort
    try:
        import shapely
        _pkg_dir = os.path.dirname(shapely.__file__)
        for _name in ("libgeos_c.so", "libgeos_c.so.1"):
            _cand = os.path.join(_pkg_dir, _name)
            if os.path.exists(_cand):
                _geos_path = _cand
                break
    except Exception:
        pass
if _geos_path:
    try:
        ctypes.CDLL(_geos_path)
        if not GEOS_LIBRARY_PATH:
            GEOS_LIBRARY_PATH = _geos_path
    except OSError:
        pass

# REST framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework_gis.filters.InBBoxFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': int(os.getenv('API_PAGE_SIZE', '200')),
}

# CORS
CORS_ALLOWED_ORIGINS = [
    *[o.strip() for o in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if o.strip()],
]
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'false').lower() in ('1', 'true', 'yes', 'on')

# If no specific origins are set, allow all in development when DEBUG is true
if DEBUG and not CORS_ALLOWED_ORIGINS:
    CORS_ALLOW_ALL_ORIGINS = True